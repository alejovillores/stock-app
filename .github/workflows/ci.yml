name: CI

on:
  push:
    branches:
      - '*' # matches every branch that doesn't contain a '/'
      - '!fix**'
  pull_request:
    branches:
      - 'develop'
      - 'main'
      - '!fix**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------
      #       check-out repo and set-up python
      # ----------------------------------------------
      - uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      # ----------------------------------------------
      #  -----  install & configure poetry  -----
      # ----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # ----------------------------------------------
      #       load cached venv if cache exists
      # ----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      # ----------------------------------------------
      # install dependencies if cache does not exist
      # ----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      # ----------------------------------------------
      # install your root project, if required
      # ----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
    outputs:
      venv-path: ${{ steps.cached-poetry-dependencies.outputs.cache-hit }}

  linter:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------
      # Wait for build job to complete and get venv path
      # ----------------------------------------------
      - name: Wait for build and get venv path
        id: get-venv-path
        run: echo "::set-output name=venv-path::${{ needs.build.outputs.venv-path }}"

      # ----------------------------------------------
      #              run flake8 linting
      # ----------------------------------------------
      - name: Run linting with flake8
        run: |
          source ${{ steps.get-venv-path.outputs.venv-path }}/bin/activate
          sh .script/linter.sh
  test:
    needs: [linter]
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------
      #              run test suite
      # ----------------------------------------------
      - name: Run tests
        run: |
          source ${{ needs.linter.outputs.venv-path }}/bin/activate
          ENV='test' poetry run pytest
